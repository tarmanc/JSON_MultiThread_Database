type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {

        }


    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            String[] database = new String[100];
            for (int i = 0; i < 100; i++) {
                database[i] = "";
            }
            boolean flag = true;
            Scanner scanner = new Scanner(System.in);

            while (flag) {
                String input = scanner.next();
                switch (input) {
                    case "exit":
                        flag = false;
                        break;
                    case "get":
                        System.out.println(get(database, scanner.nextInt()));
                        break;
                    case "set":
                        int index = scanner.nextInt();
                        String value = scanner.nextLine().trim();
                        System.out.println(set(database, index, value));
                        break;
                    case "delete":
                        System.out.println(delete(database, scanner.nextInt()));
                }
            }
        }

        public static String get(String[] database, int index) {
            index--;
            if (checkConditions(index) || database[index].isEmpty()) {
                return "ERROR";
            }
            return database[index];
        }

        public static String set(String[] database, int index, String input) {
            index--;
            if (checkConditions(index)) {
                return "ERROR";
            }
            database[index] = input;
            return "OK";
        }

        public static String delete(String[] database, int index) {
            index--;
            if (checkConditions(index)) {
                return "ERROR";
            }
            if (!database[index].isEmpty()) {
                database[index] = "";
            }
            return "OK";
        }

        private static boolean checkConditions(int index) {
            return index < 0 || index > 99;
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String CORRECT_SERVER_OUTPUT =
            "Server started!\n" +
                "Received: Give me a record # N\n" +
                "Sent: A record # N was sent!";

        private static final String CORRECT_CLIENT_OUTPUT =
            "Client started!\n" +
                "Sent: Give me a record # N\n" +
                "Received: A record # N was sent!";

        @DynamicTestingMethod
        CheckResult test() throws InterruptedException {

            TestedProgram server = new TestedProgram("server");
            server.startInBackground();
            Thread.sleep(500);

            String serverOutput = server.getOutput().trim();

            if (!serverOutput.trim().equals("Server started!")) {
                return CheckResult.wrong("Server output should be 'Server started!' until a client connects!");
            }

            TestedProgram client = new TestedProgram("client");

            String clientOutput = client.start();
            serverOutput += "\n" + server.getOutput();

            String[] serverOutputLines = serverOutput.split("\n");

            if (serverOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the server output should contain 3 lines!");
            }

            String serverOutputLastLine = serverOutputLines[serverOutputLines.length - 1];

            if (!serverOutputLastLine.contains("Sent: A record #") || !serverOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Server output after client connects to the server should be:\n"
                    + CORRECT_SERVER_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + serverOutput);
            }

            String[] clientOutputLines = clientOutput.split("\n");

            if (clientOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the client output should contain 3 lines!");
            }

            String clientOutputLastLine = clientOutputLines[clientOutputLines.length - 1];

            if (!clientOutputLastLine.contains("Received: A record #") || !clientOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Client output after client connects to the server should be:\n"
                    + CORRECT_CLIENT_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + clientOutput);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/server/datainterface/DataInputInterface.java
  visible: true
  learner_created: true
- name: src/config/NetworkConfig.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/65/stages/349/implement#comment
status: Solved
record: 1
