type: edu
files:
- name: src/server/datainterface/DataInputInterface.java
  visible: true
  text: |
    package server.datainterface;

    import java.util.Scanner;

    public class DataInputInterface {

        private final String[] database;

        public DataInputInterface(String[] database) {
            this.database = database;
        }

        public void inputInterface() {
            boolean flag = true;
            try (Scanner scanner = new Scanner(System.in)) {
                while (flag) {
                    String input = scanner.next();
                    switch (input) {
                        case "exit":
                            flag = false;
                            break;
                        case "get":
                            System.out.println(get(database, scanner.nextInt()));
                            break;
                        case "set":
                            int index = scanner.nextInt();
                            String value = scanner.nextLine().trim();
                            System.out.println(set(database, index, value));
                            break;
                        case "delete":
                            System.out.println(delete(database, scanner.nextInt()));
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }


        private String get(String[] database, int index) {
            index--;
            if (checkConditions(index) || database[index].isEmpty()) {
                return "ERROR";
            }
            return database[index];
        }

        private String set(String[] database, int index, String input) {
            index--;
            if (checkConditions(index)) {
                return "ERROR";
            }
            database[index] = input;
            return "OK";
        }

        private String delete(String[] database, int index) {
            index--;
            if (checkConditions(index)) {
                return "ERROR";
            }
            if (!database[index].isEmpty()) {
                database[index] = "";
            }
            return "OK";
        }

        private boolean checkConditions(int index) {
            return index < 0 || index > 99;
        }

    }
  learner_created: false
- name: src/config/NetworkConfig.java
  visible: true
  text: |
    package config;

    import java.net.InetAddress;
    import java.net.UnknownHostException;

    public class NetworkConfig {

        private static final String host = "127.0.0.1";
        private static final int port = 23465;

        public static InetAddress getHost() throws UnknownHostException {
            return InetAddress.getByName(host);
        }

        public static int getPort() {
            return port;
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: "import com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;\n\
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;\nimport org.hyperskill.hstest.stage.StageTest;\n\
    import org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testing.TestedProgram;\n\
    import org.junit.AfterClass;\nimport org.junit.BeforeClass;\n\nimport java.io.File;\n\
    import java.io.IOException;\nimport java.lang.management.ManagementFactory;\n\
    import java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport\
    \ java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.util.List;\n\
    \nimport static org.hyperskill.hstest.testing.expect.Expectation.expect;\nimport\
    \ static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;\nimport\
    \ static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;\n\npublic\
    \ class JsonDatabaseTest extends StageTest<String> {\n\n    private static final\
    \ String OK_STATUS = \"OK\";\n    private static final String ERROR_STATUS = \"\
    ERROR\";\n    private static final String NO_SUCH_KEY_REASON = \"No such key\"\
    ;\n\n    private static final String WRONG_EXIT = \"The server should stop when\
    \ client sends 'exit' request\";\n\n    private static final String fileName =\
    \ \"data.json\";\n    private static final String serverFolderPath = System.getProperty(\"\
    user.dir\") + File.separator +\n        \"src\" + File.separator +\n        \"\
    server\" + File.separator +\n        \"data\";\n    private static final String\
    \ serverJsonFileName = serverFolderPath + File.separator + fileName;\n\n    private\
    \ static final String clientFolderPath = System.getProperty(\"user.dir\") + File.separator\
    \ +\n        \"src\" + File.separator +\n        \"client\" + File.separator +\n\
    \        \"data\";\n\n    private static final Gson gson = new Gson();\n\n   \
    \ private static final String setFileContent = JsonBuilder.newBuilder()\n    \
    \    .addValue(\"type\", \"set\")\n        .addValue(\"key\", \"person\")\n  \
    \      .addJsonObject(\"value\", JsonBuilder.newBuilder()\n            .addValue(\"\
    name\", \"Elon Musk\")\n            .addJsonObject(\"car\",\n                JsonBuilder.newBuilder()\n\
    \                    .addValue(\"model\", \"Tesla Roadster\")\n              \
    \      .addValue(\"year\", \"2018\")\n                    .getAsJsonObject()\n\
    \            )\n            .addJsonObject(\"rocket\",\n                JsonBuilder.newBuilder()\n\
    \                    .addValue(\"name\", \"Falcon 9\")\n                    .addValue(\"\
    launches\", \"87\")\n                    .getAsJsonObject())\n            .getAsJsonObject())\n\
    \        .getAsString();\n\n    private static final String getFileContent = JsonBuilder.newBuilder()\n\
    \        .addValue(\"type\", \"get\")\n        .addValue(\"key\", gson.fromJson(\"\
    [person, name]\", JsonArray.class))\n        .getAsString();\n\n    private static\
    \ final String secondGetFileContent = JsonBuilder.newBuilder()\n        .addValue(\"\
    type\", \"get\")\n        .addValue(\"key\", gson.fromJson(\"[person]\", JsonArray.class))\n\
    \        .getAsString();\n\n    private static final String deleteFileContent\
    \ = JsonBuilder.newBuilder()\n        .addValue(\"type\", \"delete\")\n      \
    \  .addValue(\"key\", gson.fromJson(\"[person, car, year]\", JsonArray.class))\n\
    \        .getAsString();\n\n    private static final String updateFileContent\
    \ = JsonBuilder.newBuilder()\n        .addValue(\"type\", \"set\")\n        .addValue(\"\
    key\", gson.fromJson(\"[person, rocket, launches]\", JsonArray.class))\n     \
    \   .addValue(\"value\", \"88\")\n        .getAsString();\n\n    private static\
    \ int threadsCount;\n\n    @DynamicTestingMethod\n    CheckResult checkExit()\
    \ {\n\n        TestedProgram server = getServer();\n        server.startInBackground();\n\
    \n        TestedProgram client = getClient();\n        client.start(\"-t\", \"\
    exit\");\n\n        try {\n            Thread.sleep(50);\n        } catch (InterruptedException\
    \ e) {\n            e.printStackTrace();\n        }\n\n        if (!server.isFinished())\
    \ {\n            server.stop();\n            return CheckResult.wrong(WRONG_EXIT);\n\
    \        }\n\n        return CheckResult.correct();\n    }\n\n    @DynamicTestingMethod\n\
    \    CheckResult checkJsonFile() throws IOException {\n\n        if (!Files.exists(Paths.get(serverFolderPath)))\
    \ {\n            return CheckResult.wrong(\"Can't find /server/data folder\");\n\
    \        }\n\n        if (!Files.exists(Paths.get(serverJsonFileName))) {\n  \
    \          return CheckResult.wrong(\"Can't find \" + fileName + \" file in the\
    \ /server/data folder\");\n        }\n\n        if (!Files.exists(Paths.get(clientFolderPath)))\
    \ {\n            return CheckResult.wrong(\"Can't find /client/data folder\");\n\
    \        }\n\n        createJsonFiles();\n\n        return CheckResult.correct();\n\
    \    }\n\n    private static void createJsonFiles() throws IOException {\n   \
    \     Files.write(Paths.get(clientFolderPath + File.separator + \"setFile.json\"\
    ),\n            List.of(setFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"getFile.json\"\
    ),\n            List.of(getFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"secondGetFile.json\"\
    ),\n            List.of(secondGetFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"deleteFile.json\"\
    ),\n            List.of(deleteFileContent),\n            StandardCharsets.UTF_8);\n\
    \        Files.write(Paths.get(clientFolderPath + File.separator + \"updateFile.json\"\
    ),\n            List.of(updateFileContent),\n            StandardCharsets.UTF_8);\n\
    \    }\n\n    @DynamicTestingMethod\n    CheckResult testInputs() throws InterruptedException\
    \ {\n        \n        threadsCount = getThreadCount();\n\n        TestedProgram\
    \ server = getServer();\n        server.startInBackground();\n\n        TestedProgram\
    \ client;\n        String output;\n\n        String requestJson;\n        String\
    \ responseJson;\n        \n        client = getClient();\n        output = client.start(\"\
    -t\", \"set\", \"-k\", \"1\", \"-v\", \"Hello world!\");\n        requestJson\
    \ = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n \
    \           .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"set\")\n                .value(\"key\", \"1\")\n                .value(\"\
    value\", \"Hello world!\")\n            );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"response\", OK_STATUS)\n            );\n\n        //\
    \ Files\n        client = getClient();\n        output = client.start(\"-in\"\
    , \"setFile.json\");\n        requestJson = JsonFinder.findRequestJsonObject(output);\n\
    \        expect(requestJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"key\", \"person\")\n                .value(\"value\"\
    , isObject()\n                    .value(\"name\", \"Elon Musk\")\n          \
    \          .value(\"car\", isObject()\n                        .value(\"model\"\
    , \"Tesla Roadster\")\n                        .anyOtherValues()\n           \
    \         )\n                    .anyOtherValues()\n                )\n      \
    \          .anyOtherValues()\n            );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"response\", OK_STATUS)\n            );\n\n        client\
    \ = getClient();\n        output = client.start(\"-in\", \"getFile.json\");\n\
    \        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\", \"name\"\
    ))\n            );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", \"Elon Musk\")\n            );\n\n\n  \
    \      client = getClient();\n        output = client.start(\"-in\", \"updateFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"set\")\n                .value(\"key\", isArray(\"person\", \"rocket\"\
    , \"launches\"))\n                .value(\"value\", \"88\")\n            );\n\
    \        responseJson = JsonFinder.findResponseJsonObject(output);\n        expect(responseJson)\n\
    \            .asJson()\n            .check(\n                isObject()\n    \
    \                .value(\"response\", OK_STATUS)\n            );\n\n\n       \
    \ client = getClient();\n        output = client.start(\"-in\", \"secondGetFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\"))\n     \
    \       );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", isObject()\n                        .value(\"\
    rocket\", isObject()\n                            .value(\"name\", \"Falcon 9\"\
    )\n                            .value(\"launches\", \"88\")\n                \
    \        )\n                        .anyOtherValues()\n                    )\n\
    \            );\n\n\n        client = getClient();\n        output = client.start(\"\
    -in\", \"deleteFile.json\");\n        requestJson = JsonFinder.findRequestJsonObject(output);\n\
    \        expect(requestJson)\n            .asJson()\n            .check(isObject()\n\
    \                .value(\"type\", \"delete\")\n                .value(\"key\"\
    , isArray(\"person\", \"car\", \"year\"))\n            );\n        responseJson\
    \ = JsonFinder.findResponseJsonObject(output);\n        expect(responseJson)\n\
    \            .asJson()\n            .check(\n                isObject()\n    \
    \                .value(\"response\", OK_STATUS)\n            );\n\n\n       \
    \ client = getClient();\n        output = client.start(\"-in\", \"secondGetFile.json\"\
    );\n        requestJson = JsonFinder.findRequestJsonObject(output);\n        expect(requestJson)\n\
    \            .asJson()\n            .check(isObject()\n                .value(\"\
    type\", \"get\")\n                .value(\"key\", isArray(\"person\"))\n     \
    \       );\n        responseJson = JsonFinder.findResponseJsonObject(output);\n\
    \        expect(responseJson)\n            .asJson()\n            .check(\n  \
    \              isObject()\n                    .value(\"response\", OK_STATUS)\n\
    \                    .value(\"value\", isObject()\n                        .value(\"\
    rocket\", isObject()\n                            .value(\"name\", \"Falcon 9\"\
    )\n                            .value(\"launches\", \"88\")\n                \
    \        )\n                        .value(\"car\", isObject()\n             \
    \               .value(\"model\", \"Tesla Roadster\")\n                      \
    \  )\n                        .anyOtherValues()\n                    )\n     \
    \       );\n        checkIfThreadWasCreated();\n\n\n        client = getClient();\n\
    \        client.start(\"-t\", \"exit\");\n\n        return CheckResult.correct();\n\
    \    }\n\n    private static TestedProgram getClient() {\n        return new TestedProgram(\"\
    client\");\n    }\n\n    private static TestedProgram getServer() {\n        return\
    \ new TestedProgram(\"server\");\n    }\n\n    private static int getThreadCount()\
    \ {\n        return (int) ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();\n\
    \    }\n\n    private static void checkIfThreadWasCreated() {\n\n        int total\
    \ = getThreadCount();\n\n        /*8 threads: 1 server thread and 7 client threads\
    \ created during the test.\n         If the server doesn't handle clients in a\
    \ new thread then the difference between number of threads\n         before and\
    \ after the test should be equal 8 */\n        if (total - threadsCount == 8)\
    \ {\n            throw new WrongAnswer(\"Looks like you don't process client connection\
    \ in another thread.\\n\" +\n                \"Every client request should be\
    \ parsed and handled in a separate thread!\\n\" +\n                (total - threadsCount));\n\
    \        }\n    }\n\n    @AfterClass\n    public static void deleteFiles() {\n\
    \        try {\n            Files.delete(Paths.get(clientFolderPath + File.separator\
    \ + \"setFile.json\"));\n            Files.delete(Paths.get(clientFolderPath +\
    \ File.separator + \"getFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"secondGetFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"deleteFile.json\"));\n            Files.delete(Paths.get(clientFolderPath\
    \ + File.separator + \"updateFile.json\"));\n        } catch (IOException ignored)\
    \ {\n        }\n\n        String filePath = serverFolderPath + File.separator\
    \ + fileName;\n        String tempFilePath = serverFolderPath + File.separator\
    \ + \"temp.json\";\n\n        try {\n            Files.copy(Paths.get(tempFilePath),\
    \ Paths.get(filePath), StandardCopyOption.REPLACE_EXISTING);\n            Files.delete(Paths.get(tempFilePath));\n\
    \        } catch (IOException ignored) {\n        }\n    }\n\n    @BeforeClass\n\
    \    public static void copyFiles() {\n\n        String filePath = serverFolderPath\
    \ + File.separator + fileName;\n        String tempFilePath = serverFolderPath\
    \ + File.separator + \"temp.json\";\n\n        try {\n            Files.createFile(Paths.get(tempFilePath));\n\
    \        } catch (IOException ignored) {\n        }\n\n        try {\n       \
    \     Files.copy(Paths.get(filePath), Paths.get(tempFilePath), StandardCopyOption.REPLACE_EXISTING);\n\
    \        } catch (IOException ignored) {\n        }\n\n        try {\n       \
    \     Files.write(Paths.get(filePath), \"{}\".getBytes());\n        } catch (IOException\
    \ ignored) {\n        }\n    }\n}\n"
  learner_created: false
- name: test/JsonRequestBuilder.java
  visible: false
  text: |-
    import com.google.gson.Gson;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;

    class JsonBuilder {

        private final Gson gson = new Gson();
        private final JsonObject jsonObject = new JsonObject();

        private JsonBuilder() {

        }

        public static JsonBuilder newBuilder() {
            return new JsonBuilder();
        }

        public JsonBuilder addValue(String key, String value) {
            jsonObject.addProperty(key, value);
            return this;
        }

        public JsonBuilder addValue(String key, JsonElement value) {
            jsonObject.add(key, value);
            return this;
        }

        public JsonBuilder addJsonObject(String key, JsonObject object) {
            jsonObject.add(key, object);
            return this;
        }

        public String getAsString() {
            return jsonObject.toString();
        }

        public JsonObject getAsJsonObject() {
            return jsonObject;
        }
    }
  learner_created: false
- name: test/JsonFinder.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JsonFinder {

        private static final Pattern pattern = Pattern.compile("\\{.+}");

        public static String findRequestJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("type")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'type' key");
        }

        public static String findResponseJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("response")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'response' key");
        }
    }
  learner_created: false
- name: src/server/datainterface/JsonDataBase.java
  visible: true
  text: |
    package server.datainterface;

    import com.google.gson.Gson;
    import com.google.gson.reflect.TypeToken;

    import java.io.*;
    import java.lang.reflect.Type;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.concurrent.locks.Lock;
    import java.util.concurrent.locks.ReentrantReadWriteLock;

    public final class JsonDataBase {

        private static JsonDataBase INSTANCE;
        private HashMap<String, String> database = null;

        public static final String databasePath = System.getProperty("user.dir") + "/src/server/data/db.json";
        private final File databaseFile;

        private final Gson gson;

        private final Lock readLock;
        private final Lock writeLock;

        private JsonDataBase() {
            this.databaseFile = new File(databasePath);
            ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();
            readLock = readWriteLock.readLock();
            writeLock = readWriteLock.writeLock();
            gson = new Gson();
            try (BufferedReader reader = new BufferedReader(new FileReader(databaseFile))) {
                Type type = new TypeToken<Map<String, String>>(){}.getType();
                database = gson.fromJson(reader, type);
            } catch (IOException e) {
                e.printStackTrace();
            }

        }

        public static JsonDataBase getINSTANCE() {
            if (INSTANCE == null) {
                synchronized (JsonDataBase.class) {
                    if (INSTANCE == null) {
                        INSTANCE = new JsonDataBase();
                    }
                }
            }
            return INSTANCE;
        }

        public JsonMessage get(String key) {
            JsonMessage jsonMessage = new JsonMessage();
            try {
                readLock.lock();
                String value = database.getOrDefault(key, null);
                if (value == null) {
                    jsonMessage.setResponse("ERROR");
                    jsonMessage.setReason("No such key");
                } else {
                    jsonMessage.setResponse("OK");
                    jsonMessage.setValue(value);
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                readLock.unlock();
            }
            return jsonMessage;
        }

        public JsonMessage set(String key, String value) {

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(databaseFile))) {
                writeLock.lock();
                database.put(key, value);
                writer.write(gson.toJson(database));
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                writeLock.unlock();
            }

            JsonMessage jsonMessage = new JsonMessage();
            jsonMessage.setResponse("OK");
            return jsonMessage;
        }

        public JsonMessage delete(String key) {
            JsonMessage jsonMessage = new JsonMessage();

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(databaseFile))) {
                writeLock.lock();
                String value = database.remove(key);
                if (value != null) {
                    writer.write(gson.toJson(database));
                    jsonMessage.setResponse("OK");
                    return jsonMessage;
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                writeLock.unlock();
            }

            jsonMessage.setResponse("ERROR");
            jsonMessage.setReason("No such key");
            return jsonMessage;
        }

    }
  learner_created: true
- name: src/client/data/testGet.json
  visible: true
  text: '{"type":"get","key":"name"}'
  learner_created: true
- name: src/server/datainterface/JsonMessage.java
  visible: true
  text: |
    package server.datainterface;

    import com.google.gson.Gson;


    public class JsonMessage {

        private String response;
        private String reason;
        private String value;
        private String type;
        private String key;

        public String getJsonMessage() {
            return new Gson().toJson(this);
        }

        public String getType() {
            return type;
        }


        public String getValue() {
            return value;
        }

        public String getKey() {
            return key;
        }

        public void setResponse(String response) {
            this.response = response;
        }

        public void setReason(String reason) {
            this.reason = reason;
        }

        public void setValue(String value) {
            this.value = value;
        }

        public void setType(String type) {
            this.type = type;
        }

        public void setKey(String key) {
            this.key = key;
        }
    }
  learner_created: true
- name: src/client/argscommander/Args.java
  visible: true
  text: |
    package client.argscommander;

    import com.beust.jcommander.Parameter;

    import java.util.ArrayList;
    import java.util.List;

    public class Args {

        @Parameter
        private List<String> parameters = new ArrayList<>();

        @Parameter(names = "-t", description = "get/set/delete commands")
        private String command;

        @Parameter(names = "-k", description = "database key")
        private String key;

        @Parameter(names = "-v", description = "payload")
        private String message;

        @Parameter(names = "-in", description = "jsonFilePath")
        private String fileName;

        public String getCommand() {
            return command;
        }

        public String getKey() {
            return key;
        }

        public String getMessage() {
            return message;
        }

        public String getFileName() {
            return fileName;
        }
    }
  learner_created: true
- name: src/client/data/testSet.json
  visible: true
  text: '{"type":"set","key":"name","value":"Kate"}'
  learner_created: true
- name: src/client/data/testDelete.json
  visible: true
  text: '{"type":"delete","key":"name"}'
  learner_created: true
- name: src/server/data/db.json
  visible: true
  text: '{"text":"Some text here"}'
  learner_created: true
- name: src/server/data/data.json
  visible: true
  learner_created: true
- name: src/client/Main.java
  visible: true
  learner_created: true
- name: src/server/JSONProcessor.java
  visible: true
  learner_created: true
- name: src/server/Main.java
  visible: true
  learner_created: true
- name: src/server/ClientThread.java
  visible: true
  learner_created: true
- name: src/server/Database.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/65/stages/353/implement#comment
status: Failed
feedback:
  message: |-
    Error in test #3

    In this test, the program is running for a long time, more than 15 seconds. Most likely, the program has gone into an infinite loop.

    Please find below the output of your program during this failed test.

    ---

    Arguments for Main: -t set -k 1 -v &quot;Hello world!&quot;
    Arguments for Main: -in setFile.json
    Arguments for Main: -in getFile.json
    Arguments for Main: -in updateFile.json

    Server started!
    Client started!
    Sent: {&quot;type&quot;:&quot;set&quot;,&quot;key&quot;:&quot;1&quot;,&quot;value&quot;:&quot;Hello world!&quot;}
    Received: {&quot;response&quot;:&quot;OK&quot;}
    Client started!
    Sent: {&quot;type&quot;:&quot;set&quot;,&quot;key&quot;:&quot;person&quot;,&quot;value&quot;:{&quot;name&quot;:&quot;Elon Musk&quot;,&quot;car&quot;:{&quot;model&quot;:&quot;Tesla Roadster&quot;,&quot;year&quot;:&quot;2018&quot;},&quot;rocket&quot;:{&quot;name&quot;:&quot;Falcon 9&quot;,&quot;launches&quot;:&quot;87&quot;}}}
    Received: {&quot;response&quot;:&quot;OK&quot;}
    Client started!
    Sent: {&quot;type&quot;:&quot;get&quot;,&quot;key&quot;:[&quot;person&quot;,&quot;name&quot;]}
    Received: {&quot;response&quot;:&quot;OK&quot;,&quot;value&quot;:&quot;Elon Musk&quot;}
    Client started!
    Sent: {&quot;type&quot;:&quot;set&quot;,&quot;key&quot;:[&quot;person&quot;,&quot;rocket&quot;,&quot;launches&quot;],&quot;value&quot;:&quot;88&quot;}
  time: Mon, 08 Mar 2021 20:22:32 UTC
record: -1
